Okay here are my notes on the data structures that I have implemented in C++ and some
extra details and ideas that I got along with it!
------------------------------------------------------------------------------------

Do not use bits/stdc++.h as during the time of coding test, these librarires might not be
available
------------------------------------------------------------------------------------

Wow! I wrote a brilliant code for linked list. Vey clean. Amazing
------------------------------------------------------------------------------------

In a doubly linked list, swap the prev and the next pointers and set the head to the last 
element and you are done!
-----------------------------------------------------------------------------------

Shiv! If you wanna get somewhere, then you have to implement all those data structures 
that you think won't matter. Be hyper good  at what you do. Please!
-----------------------------------------------------------------------------------

Tree traversals:
preorder: Par(P)Left(L)Right(R)
inorder: LPR
post: LRP

non recursive algo blueprint for traversals:
Preorder:
===================================
initialize a stack S
while(root!=NULL){
	visit root; // here
	pust root to stack;
	root = root->left;
}

while(!stack.empty()){
	root = stack.pop;
	root = root->right;
	while(root!=NULL){
		visit(root); //here!
		push root to stack
		root = root->left;

	}
}

==================================

In order:
=================================
while(root!=NULL){
	push root to stack;
	root = root->left;
}

while(!stack.empty()){
	root = stack.pop;
	visit(root) //// Put visit here!
	root = root->right;
	while(root!=NULL){
	push root to stack;
	root = root->left;
	}
}
================================

------------------------------------------------------
recursive tree creation idea/hack

the thing is, instead of taking the data from the user and then building the tree,
build a tree and ask user to fill data into it.

node *build(int value){
	if (value != -1){
		node *N = (node*)malloc(sizeof(node));
		node->data = value;
		node->left = create(input());
		node->right = create(input());
		return node;
	}
	else{
	return NULL;
	}
}

Short and elegant

-------------------------------------------------------

Advanced Data Structure Notes:

B Trees:

Okay so they are an extension of normal Binary search trees
They have the following properties:
- all have a degree (T) which is the number of children it can have
- root node can have atmost T-1 keys
- every leaf node will have at most T-1 keys of (T-1)/2 keys at min
- Each of non-leaf nodes will have T-1 keys in them and will point to T children
- All leaves appear in the same level

How to insert into it:

This is simple...
when you get a key, insert it into its proper location if the location is free
if location not free then remove the (T-1)/2 th element and insert the new item in between
insert the item into the btree again using the algorithm that you already know





